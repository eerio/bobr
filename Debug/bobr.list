
bobr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000224  0800022c  0001022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000224  08000224  0001022c  2**0
                  CONTENTS
  4 .ARM          00000000  08000224  08000224  0001022c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000224  0800022c  0001022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000224  08000224  00010224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000228  08000228  00010228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800022c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000064  2000001c  0800022c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000033d  00000000  00000000  00010254  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000103  00000000  00000000  00010591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000050  00000000  00000000  00010698  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000038  00000000  00000000  000106e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008f14  00000000  00000000  00010720  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004b4  00000000  00000000  00019634  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0002fa14  00000000  00000000  00019ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000494fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000078  00000000  00000000  00049578  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000000 	.word	0x20000000
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800020c 	.word	0x0800020c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000004 	.word	0x20000004
 80000fc:	0800020c 	.word	0x0800020c

08000100 <delay>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(volatile unsigned n)
{
 8000100:	b580      	push	{r7, lr}
 8000102:	b082      	sub	sp, #8
 8000104:	af00      	add	r7, sp, #0
 8000106:	6078      	str	r0, [r7, #4]
	while(--n);
 8000108:	46c0      	nop			; (mov r8, r8)
 800010a:	687b      	ldr	r3, [r7, #4]
 800010c:	3b01      	subs	r3, #1
 800010e:	607b      	str	r3, [r7, #4]
 8000110:	2b00      	cmp	r3, #0
 8000112:	d1fa      	bne.n	800010a <delay+0xa>
}
 8000114:	46c0      	nop			; (mov r8, r8)
 8000116:	46bd      	mov	sp, r7
 8000118:	b002      	add	sp, #8
 800011a:	bd80      	pop	{r7, pc}

0800011c <main>:

int main(void)
{
 800011c:	b580      	push	{r7, lr}
 800011e:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_IOPBEN;
 8000120:	4b10      	ldr	r3, [pc, #64]	; (8000164 <main+0x48>)
 8000122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000124:	4b0f      	ldr	r3, [pc, #60]	; (8000164 <main+0x48>)
 8000126:	2102      	movs	r1, #2
 8000128:	430a      	orrs	r2, r1
 800012a:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOB->MODER |= GPIO_MODER_MODE3_0;
 800012c:	4b0e      	ldr	r3, [pc, #56]	; (8000168 <main+0x4c>)
 800012e:	681a      	ldr	r2, [r3, #0]
 8000130:	4b0d      	ldr	r3, [pc, #52]	; (8000168 <main+0x4c>)
 8000132:	2140      	movs	r1, #64	; 0x40
 8000134:	430a      	orrs	r2, r1
 8000136:	601a      	str	r2, [r3, #0]

	for(;;)
	{
		LED_ON();
 8000138:	4b0b      	ldr	r3, [pc, #44]	; (8000168 <main+0x4c>)
 800013a:	699a      	ldr	r2, [r3, #24]
 800013c:	4b0a      	ldr	r3, [pc, #40]	; (8000168 <main+0x4c>)
 800013e:	2108      	movs	r1, #8
 8000140:	430a      	orrs	r2, r1
 8000142:	619a      	str	r2, [r3, #24]
		delay(100000);
 8000144:	4b09      	ldr	r3, [pc, #36]	; (800016c <main+0x50>)
 8000146:	0018      	movs	r0, r3
 8000148:	f7ff ffda 	bl	8000100 <delay>
		LED_OFF();
 800014c:	4b06      	ldr	r3, [pc, #24]	; (8000168 <main+0x4c>)
 800014e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <main+0x4c>)
 8000152:	2108      	movs	r1, #8
 8000154:	430a      	orrs	r2, r1
 8000156:	629a      	str	r2, [r3, #40]	; 0x28
		delay(100000);
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <main+0x50>)
 800015a:	0018      	movs	r0, r3
 800015c:	f7ff ffd0 	bl	8000100 <delay>
		LED_ON();
 8000160:	e7ea      	b.n	8000138 <main+0x1c>
 8000162:	46c0      	nop			; (mov r8, r8)
 8000164:	40021000 	.word	0x40021000
 8000168:	50000400 	.word	0x50000400
 800016c:	000186a0 	.word	0x000186a0

08000170 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000170:	480d      	ldr	r0, [pc, #52]	; (80001a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000172:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000174:	480d      	ldr	r0, [pc, #52]	; (80001ac <LoopForever+0x6>)
  ldr r1, =_edata
 8000176:	490e      	ldr	r1, [pc, #56]	; (80001b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000178:	4a0e      	ldr	r2, [pc, #56]	; (80001b4 <LoopForever+0xe>)
  movs r3, #0
 800017a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800017c:	e002      	b.n	8000184 <LoopCopyDataInit>

0800017e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800017e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000182:	3304      	adds	r3, #4

08000184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000188:	d3f9      	bcc.n	800017e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800018a:	4a0b      	ldr	r2, [pc, #44]	; (80001b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800018c:	4c0b      	ldr	r4, [pc, #44]	; (80001bc <LoopForever+0x16>)
  movs r3, #0
 800018e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000190:	e001      	b.n	8000196 <LoopFillZerobss>

08000192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000194:	3204      	adds	r2, #4

08000196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000198:	d3fb      	bcc.n	8000192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800019a:	e000      	b.n	800019e <LoopFillZerobss+0x8>
 800019c:	bf00      	nop
/* Call static constructors */
  bl __libc_init_array
 800019e:	f000 f811 	bl	80001c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001a2:	f7ff ffbb 	bl	800011c <main>

080001a6 <LoopForever>:

LoopForever:
    b LoopForever
 80001a6:	e7fe      	b.n	80001a6 <LoopForever>
  ldr   r0, =_estack
 80001a8:	20000800 	.word	0x20000800
  ldr r0, =_sdata
 80001ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001b4:	0800022c 	.word	0x0800022c
  ldr r2, =_sbss
 80001b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001bc:	2000001c 	.word	0x2000001c

080001c0 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c0:	e7fe      	b.n	80001c0 <ADC_COMP_IRQHandler>
	...

080001c4 <__libc_init_array>:
 80001c4:	b570      	push	{r4, r5, r6, lr}
 80001c6:	2600      	movs	r6, #0
 80001c8:	4d0c      	ldr	r5, [pc, #48]	; (80001fc <__libc_init_array+0x38>)
 80001ca:	4c0d      	ldr	r4, [pc, #52]	; (8000200 <__libc_init_array+0x3c>)
 80001cc:	1b64      	subs	r4, r4, r5
 80001ce:	10a4      	asrs	r4, r4, #2
 80001d0:	42a6      	cmp	r6, r4
 80001d2:	d109      	bne.n	80001e8 <__libc_init_array+0x24>
 80001d4:	2600      	movs	r6, #0
 80001d6:	f000 f819 	bl	800020c <_init>
 80001da:	4d0a      	ldr	r5, [pc, #40]	; (8000204 <__libc_init_array+0x40>)
 80001dc:	4c0a      	ldr	r4, [pc, #40]	; (8000208 <__libc_init_array+0x44>)
 80001de:	1b64      	subs	r4, r4, r5
 80001e0:	10a4      	asrs	r4, r4, #2
 80001e2:	42a6      	cmp	r6, r4
 80001e4:	d105      	bne.n	80001f2 <__libc_init_array+0x2e>
 80001e6:	bd70      	pop	{r4, r5, r6, pc}
 80001e8:	00b3      	lsls	r3, r6, #2
 80001ea:	58eb      	ldr	r3, [r5, r3]
 80001ec:	4798      	blx	r3
 80001ee:	3601      	adds	r6, #1
 80001f0:	e7ee      	b.n	80001d0 <__libc_init_array+0xc>
 80001f2:	00b3      	lsls	r3, r6, #2
 80001f4:	58eb      	ldr	r3, [r5, r3]
 80001f6:	4798      	blx	r3
 80001f8:	3601      	adds	r6, #1
 80001fa:	e7f2      	b.n	80001e2 <__libc_init_array+0x1e>
 80001fc:	08000224 	.word	0x08000224
 8000200:	08000224 	.word	0x08000224
 8000204:	08000224 	.word	0x08000224
 8000208:	08000228 	.word	0x08000228

0800020c <_init>:
 800020c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800020e:	46c0      	nop			; (mov r8, r8)
 8000210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000212:	bc08      	pop	{r3}
 8000214:	469e      	mov	lr, r3
 8000216:	4770      	bx	lr

08000218 <_fini>:
 8000218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021a:	46c0      	nop			; (mov r8, r8)
 800021c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800021e:	bc08      	pop	{r3}
 8000220:	469e      	mov	lr, r3
 8000222:	4770      	bx	lr
